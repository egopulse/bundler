#!/usr/bin env node
const fs = require('fs');
const rootDir = `${__dirname}/..`;
require('shelljs/global');
const {BASE_DIR = `${rootDir}/pulse`, BUILD_DIR='/tmp/build', RESULT_DIR='/tmp/build_results'} = process.env;
mkdir('-p', RESULT_DIR);

const {GITHUB_OAUTH_TOKEN = 'e2b057c8a364316eab25335c8ce398b82ba0fd9b'} = process.env;

if (!which('docker') || !which('java') || !which('curl') || !which('unzip')) {
  echo(`Failed to proceed without necessary application (git | docker | java | curl | unzip)`);
  exit(1);
}

require('./readInput')(json => {
  const {vcs_url, vcs_revision} = json;
  const revisionDir = `${BUILD_DIR}/${vcs_revision}`;
  rm('-rf', revisionDir);
  mkdir('-p', revisionDir);

  const log = fs.createWriteStream(`${RESULT_DIR}/${vcs_revision}.log`, { flags: 'a' });
  const downloadUrl = `${vcs_url}/archive/${vcs_revision}.zip`;
  console.log(downloadUrl);

  if (GITHUB_OAUTH_TOKEN) {
    exec(`curl -L -u "${GITHUB_OAUTH_TOKEN}:x-oauth-basic" ${downloadUrl} -o ${revisionDir}/${vcs_revision}`);
  } else {
    exec(`curl -L -u -o ${revisionDir}/${vcs_revision}  ${downloadUrl} -o ${revisionDir}/${vcs_revision}`);
  }

  exec(`unzip ${revisionDir}/${vcs_revision}`);

  exec(`${BUILD_DIR}/${vcs_revision}/scripts/build docker:earth`, (code, stdout, stderr) => {
    console.log('Exit code:', code);
    console.log('Program output:', stdout);
    console.log('Program stderr:', stderr);
  });

});