#!/usr/bin env node
const fs = require('fs');
const rootDir = `${__dirname}/..`;
require('shelljs/global');
const {BASE_DIR = `${rootDir}/pulse`, BUILD_DIR='/tmp/build', RESULT_DIR='/tmp/build_results'} = process.env;
mkdir('-p', RESULT_DIR);

const {GITHUB_OAUTH_TOKEN} = process.env;

if (!which('docker') || !which('java') || !which('curl') || !which('unzip')) {
  echo(`Failed to proceed without necessary application (git | docker | java | curl | unzip)`);
  exit(1);
}

require('./readInput')(json => {
  const {vcs_url, vcs_revision} = json;
  const revisionDir = `${BUILD_DIR}/${vcs_revision}`;
  rm('-rf', revisionDir);
  mkdir('-p', revisionDir);
  const logFile = `${RESULT_DIR}/${vcs_revision}.log`;

  exec(`touch ${logFile}`);
  let downloadUrl = `${vcs_url}/archive/${vcs_revision}.zip`;

  const downloadReady = (!GITHUB_OAUTH_TOKEN)
    ? exec(`curl -# -L -o ${revisionDir}/${vcs_revision}.zip ${downloadUrl}`).code
    : exec(`curl -# -L -u ${GITHUB_OAUTH_TOKEN}:x-oauth-basic -o ${revisionDir}/${vcs_revision}.zip ${downloadUrl}`).code;

  if (downloadReady !== 0) {
    echo('Problem with downloading files');
    exit(1);
  }

  exec(`unzip ${revisionDir}/${vcs_revision}.zip -d ${revisionDir}/${vcs_revision}`);

  exec(`${BUILD_DIR}/${vcs_revision}/pulse-${vcs_revision}/scripts/build docker:earth`, (code, stdout, stderr) => {
    echo(`Exit code: ${code}`).toEnd(logFile);
    echo(stdout).toEnd(logFile);
    echo(stderr).toEnd(logFile);
  });

});